from asyncio import sleep

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ContentTypes, ReplyKeyboardMarkup, KeyboardButton


from data.config import ADMINS
from keyboards.inline.admin_keyboard import cancel_button, confirm_price, confirm_weight, change_item, transliterator, \
    choose_message_type, photo_markup, text_markup, item_change_menu, confirm_price_changes, confirm_weight_changes, \
    confirm_description_changes, confirm_photo_changes, cancel_delete
from keyboards.inline.menu_keyboards import menu_keyboards
from loader import dp, bot

# –õ–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
from states import states
from utils.db_api import models
from utils.db_api.db_commands import delete_item, delete_photo, get_id_users, get_subcategory_name, find_item
from utils.db_api.models import Item, Photo


@dp.message_handler(user_id=ADMINS[0], text_contains='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–∞')
async def admin_menu(message: types.Message):
    keyboard = await change_item()
    await message.answer('–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞',
                         reply_markup=keyboard)

@dp.message_handler(user_id=ADMINS[0], text_contains='‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä')
async def create_item(message: types.Message):
    cancel_btn = await cancel_button()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=cancel_btn)

    await states.AdminPanel.Category.set()

@dp.message_handler(user_id=ADMINS[0], text_contains='‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è')
async def back(message: types.Message):
    markup = await menu_keyboards()

    if message.from_user.id == int(ADMINS[0]):
        markup.insert(
            KeyboardButton(
                text='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–∞'
            )
        )
        markup.insert(
            KeyboardButton(
                text='‚úâ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'
            )
        )
    await message.answer('–ú–µ–Ω—é: ',reply_markup=markup)

# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã
@dp.callback_query_handler(text_contains='cancel', state=states.AdminPanel)
async def cancel(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.reset_state()

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç –∞–¥–º–∏–Ω–∞
@dp.message_handler(user_id=ADMINS[0], state=states.AdminPanel.Category)
async def enter_category(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        category_name = str(message.text)
    except ValueError:
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        return

    item = models.Item()
    cancel_btn = await cancel_button()
    if category_name.upper() == '–ü–∏—Ü—Ü–∞'.upper():
        item.category_code = 'Pizza'
        item.category_name = 'üçï –ü–∏—Ü—Ü–∞'
    elif category_name.upper() == '–®–∞—É—Ä–º–∞'.upper():
        item.category_code = 'Shaurma'
        item.category_name = 'üåØ –®–∞—É—Ä–º–∞'
    elif category_name.upper() == 'Wok-–õ–∞–ø—à–∞'.upper():
        item.category_code = 'wok-noodles'
        item.category_name = 'ü•° Wok-–õ–∞–ø—à–∞'
    elif category_name.upper() == '–ë—É—Ä–≥–µ—Ä—ã'.upper():
        item.category_code = 'burgers'
        item.category_name = 'üçî –ë—É—Ä–≥–µ—Ä—ã'
    elif category_name.upper() == '–ó–∞–∫—É—Å–∫–∏'.upper():
        item.category_code = 'snacks'
        item.category_name = 'üçü –ó–∞–∫—É—Å–∫–∏'
    if category_name.upper() == '–°—É—à–∏'.upper():
        item.category_code = 'Sushi'
        item.category_name = 'üç£ –°—É—à–∏'
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {item.category_name}\n\n'
                             '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ',
                             reply_markup=cancel_btn)
        await states.AdminPanel.Subcategory.set()
        await state.update_data(item=item)
    else:
        category_code = await transliterator(category_name)
        item.category_code = category_code
        item.category_name = category_name
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {item.category_name}\n\n'
                             '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ',
                             reply_markup=cancel_btn)
        item.subcategory_code = '-'
        item.subcategory_name = '-'
        await states.AdminPanel.Name.set()
        await state.update_data(item=item)


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä—é —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(user_id=ADMINS[0], state=states.AdminPanel.Subcategory)
async def enter_subcategory(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
    try:
        subcategory = str(message.text)
    except ValueError:
        await message.answer('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        return

    data = await state.get_data()
    item: models.Item = data.get('item')
    item.subcategory_name = subcategory
    if item.category_name == 'üç£ –°—É—à–∏':
        subcategory_code = await get_subcategory_name(str(subcategory))
        text = subcategory_code.subcategory_code
    else:
        text = await transliterator(subcategory)
    print(text)
    item.subcategory_code = text

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    cancel_btn = await cancel_button()

    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {item.category_name}\n\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {item.subcategory_name}\n'
                         '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ',
                          reply_markup=cancel_btn)
    await states.AdminPanel.Name.set()
    await state.update_data(item=item)

# –õ–æ–≤–∏–º –∏–º—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(user_id=ADMINS[0], state=states.AdminPanel.Name)
async def enter_name(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞
    name = message.text
    cancel_btn = await cancel_button()
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ item –∏–∑ state
    data = await state.get_data()
    item: models.Item = data.get('item')
    item.name = name

    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {item.category_name}\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {name}\n\n'
                         '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏–∫—Ä–µ–ø–∏–≤ —Ñ–æ—Ç–æ –∫ –ø—É—Å—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)',
                            reply_markup=cancel_btn)

    await states.AdminPanel.Photo.set()
    await state.update_data(item=item)

# –õ–æ–≤–∏–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(user_id=ADMINS[0], state=states.AdminPanel.Photo, content_types=ContentTypes.PHOTO)
async def add_photo(message: types.Message, state: FSMContext):

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
    photo = message.photo[-1].file_id
    cancel_btn = await cancel_button()
    data = await state.get_data()
    item: models.Item = data.get('item')

    await message.answer_photo(photo=photo,
                               caption=(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞: {item.category_name}\n'
                                        f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item.name}\n\n'
                                        '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'),
                               reply_markup=cancel_btn)
    await states.AdminPanel.Description.set()
    await state.update_data(photo=models.Photo(
        file_id=photo,
        filename=item.name,
        product=item.name
    )
    )
# –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(user_id=ADMINS[0], state=states.AdminPanel.Description)
async def enter_description(message: types.Message, state: FSMContext):
    description = message.text
    data = await state.get_data()
    item: models.Item = data.get('item')
    item.description = description
    cancel_btn = await cancel_button()

    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞: {item.category_name}\n'
                         f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item.name}\n\n'
                         '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö',reply_markup=cancel_btn)

    await states.AdminPanel.Price.set()
    await state.update_data(item=item)

# –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(user_id=ADMINS[0], state=states.AdminPanel.Price)
async def enter_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item: models.Item = data.get('item')
    try:
        price = int(message.text)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return

    item.price = price
    markup = await confirm_price()
    text = f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞: {item.category_name}\n'\
           f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item.name}\n'\
           f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {item.price} —Ä—É–±.\n\n' \



    await state.update_data(item=item)
    await message.answer(text=text, reply_markup=markup)

    await states.AdminPanel.Weight.set()

@dp.callback_query_handler(user_id=ADMINS[0],text_contains='price_change',state=states.AdminPanel.Weight)
async def change_price(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö')

    await states.AdminPanel.Price.set()

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞—Å—Å—É —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(user_id=ADMINS[0],text_contains='price_confirm', state=states.AdminPanel.Weight)
async def enter_weight(call: CallbackQuery):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞ –≤ –≥—Ä–∞–º–º–∞—Ö')
    await states.AdminPanel.Weight.set()

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Å—Å—É —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(user_id=ADMINS[0], state=states.AdminPanel.Weight)
async def enter_weight(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item: models.Item = data.get('item')

    weight_keyboard = await confirm_weight()
    photo: models.Photo = data.get('photo')
    try:
        weight = int(message.text)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return

    item.weight = weight
    if item.subcategory_name != '-':
        await message.answer_photo(photo=photo.file_id,caption=
                             f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞: {item.category_name}\n'
                             f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞:{item.subcategory_name}\n'
                             f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item.name}\n'
                             f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {item.price} —Ä—É–±.\n'
                             f'–ú–∞—Å—Å–∞ —Ç–æ–≤–∞—Ä–∞ {weight} –≥—Ä.',
                             reply_markup=weight_keyboard)
    else:
        await message.answer_photo(photo=photo.file_id, caption=
                            f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞: {item.category_name}\n'
                            f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item.name}\n'
                            f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {item.price} —Ä—É–±.\n'
                            f'–ú–∞—Å—Å–∞ —Ç–æ–≤–∞—Ä–∞ {weight} –≥—Ä.',
                            reply_markup=weight_keyboard)

    await state.update_data(item=item)
    await states.AdminPanel.Confirm.set()

# –ò–∑–º–µ–Ω—è–µ–º –º–∞—Å—Å—É —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(user_id=ADMINS[0],text_contains='weight_change',state=states.AdminPanel.Confirm)
async def change_price(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞ –≤ –≥—Ä–∞–º–º–∞—Ö')

    await states.AdminPanel.Weight.set()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(user_id=ADMINS[0], text_contains='confirm_weigth', state=states.AdminPanel.Confirm)
async def confirm(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item: models.Item = data.get('item')
    photo: models.Photo = data.get('photo')

    await item.create()
    await photo.create()
    await call.message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    await state.reset_state()

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã
@dp.message_handler(user_id=ADMINS[0], text_contains='‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä',)
async def enter_item_name(message: types.Message):
    markup = await cancel_delete()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',reply_markup=markup)
    await states.DeleteItem.Item.set()

@dp.callback_query_handler(user_id=ADMINS[0], text_contains='cancel_delete',state=states.DeleteItem.Item)
async def cancel_del(call: CallbackQuery, state: FSMContext):
    await state.reset_state()
    await call.message.edit_text('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!')


# –õ–æ–≤–∏–º –∏–º—è —Ç–æ–≤–∞—Ä–∞ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
@dp.message_handler(user_id=ADMINS[0], state=states.DeleteItem.Item)
async def del_item(message: types.Message, state: FSMContext):
    item = message.text
    await delete_item(item)
    await delete_photo(item)
    await state.reset_state()
    await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(user_id=ADMINS[0], text_contains='‚úâ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def message(message: types.Message):
    markup = await choose_message_type()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏',
                         reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(user_id=ADMINS[0], text_contains="back_to_the_menu")
async def kill_mailing(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É')


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(user_id=ADMINS[0], text_contains="cancel_mailing", state=states.Mailing)
async def kill_mailing(call: CallbackQuery, state: FSMContext):
    await call.message.answer(text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É')
    await state.reset_state()

@dp.callback_query_handler(user_id=ADMINS[0], text_contains='text_mailing')
async def enter_mailing_text(call: CallbackQuery):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    await states.Mailing.Text.set()


@dp.callback_query_handler(user_id=ADMINS[0], text_contains='photo_mailing')
async def send_photo_mailing(call: CallbackQuery):
    await call.message.edit_text('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é ')

    await states.Mailing.Photo.set()

@dp.message_handler(user_id=ADMINS[0], state=states.Mailing.Text, content_types=ContentTypes.TEXT)
async def mailtext(message: types.Message, state: FSMContext):
    markup = await text_markup()
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
                            reply_markup=markup)
    await states.Mailing.Confirm.set()


@dp.message_handler(user_id=ADMINS[0], state=states.Mailing.Photo, content_types=ContentTypes.PHOTO)
async def photo_mailing(message: types.Message, state: FSMContext):
    text = message.caption
    markup = await photo_markup()
    photo = message.photo[-1].file_id
    await message.answer_photo(photo=photo, caption=text, reply_markup=markup)
    await state.update_data(photo=photo, caption=text)
    await states.Mailing.Confirm.set()

@dp.callback_query_handler(user_id=ADMINS[0], text_contains='accept_photo',state=states.Mailing.Confirm)
async def confirm_photo(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo = data.get('photo')
    caption = data.get('caption')
    users = await get_id_users()

    for user in users:
        try:
            await bot.send_photo(chat_id=user.buyer, photo=photo, caption=caption)

            await sleep(0.3)
        except Exception:
            pass
    await state.reset_state()
    await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')

@dp.callback_query_handler(user_id=ADMINS[0], text_contains='accept_text', state=states.Mailing.Confirm)
async def confirm_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = data.get('text')
    users = await get_id_users()

    for user in users:
        try:
            await bot.send_text(chat_id=user.buyer, text=text)

            await sleep(0.3)
        except Exception:
            pass
    await state.reset_state()
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')

# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(user_id=ADMINS[0], text_contains='üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def change_items(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await states.ChangeItem.ItemName.set()

# –õ–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(user_id=ADMINS[0], state=states.ChangeItem.ItemName)
async def item_name(message: types.Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ state
    itemName = message.text

    try:
        item = await Item.query.where(Item.name == itemName).gino.first()
        await state.update_data(item_name=item.name)
    except Exception:
        await message.answer('–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –µ—â–µ —Ä–∞–∑')
        return



    markup = await item_change_menu()

    await message.answer(text=f'<u>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞</u>: <code> {item.category_name}</code>\n'
                                 f'<u>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</u> <code> {item.subcategory_name}</code>\n'
                                 f'<u>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</u> <code> {item.name}</code>',
                        reply_markup=markup)

    await states.ChangeItem.ItemName.set()



# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
@dp.callback_query_handler(user_id=ADMINS[0], text_contains='item_change_price', state=states.ChangeItem.ItemName)
async def process_change_price(call: CallbackQuery):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
    await states.ChangeItem.Price.set()

# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞
@dp.callback_query_handler(user_id=ADMINS[0], text_contains="item_change_weight", state=states.ChangeItem.ItemName)
async def process_change_weight(call: CallbackQuery):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞—Å—Å—É —Ç–æ–≤–∞—Ä–∞')
    await states.ChangeItem.Weight.set()

# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query_handler(user_id=ADMINS[0], text_contains="item_change_description", state=states.ChangeItem.ItemName)
async def process_change_desc(call: CallbackQuery):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await states.ChangeItem.Description.set()


# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
@dp.callback_query_handler(user_id=ADMINS[0], text_contains="change_photo_command", state=states.ChangeItem.ItemName)
async def process_change_desc(call: CallbackQuery):
    await call.message.answer(text='–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –ø—É—Å—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ <i>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</i>')
    await states.ChangeItem.Photo.set()

# –û—Ç–º–µ–Ω–∞
@dp.callback_query_handler(user_id=ADMINS[0], text_contains="cancel_command", state=states.ChangeItem)
async def process_change_desc(call: CallbackQuery,state: FSMContext):
    await call.message.answer(text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.reset_state()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ state
@dp.message_handler(user_id=ADMINS[0], state=states.ChangeItem.Price)
async def change_price_command(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item_name = data.get('item_name')
    item = await Item.query.where(Item.name == item_name).gino.first()
    photo = await Photo.query.where(Photo.product == item_name).gino.first()
    try:
        price = int(message.text)
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return

    markup = await confirm_price_changes()
    await message.answer_photo(photo=photo.file_id,
                               caption=f'<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞</b>: <code> {item.category_name}</code>\n'
                                 f'<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.subcategory_name}</code>\n'
                                 f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.name}</code>\n'
                                 f'<b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> <code> {price}</code>',
                               reply_markup=markup)

    await state.update_data(price=price)
    await states.ChangeItem.ConfirmChanges.set()


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –≤ state
@dp.message_handler(user_id=ADMINS[0], state=states.ChangeItem.Weight)
async def change_price_command(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item_name = data.get('item_name')
    item = await Item.query.where(Item.name == item_name).gino.first()
    photo = await Photo.query.where(Photo.product == item_name).gino.first()
    try:
        weight = int(message.text)
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return

    markup = await confirm_weight_changes()
    await message.answer_photo(photo=photo.file_id,
                               caption=f'<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞</b>: <code> {item.category_name}</code>\n'
                                 f'<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.subcategory_name}</code>\n'
                                 f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.name}</code>\n'
                                 f'<b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.price}</code>\n'
                                 f'<b>–í–µ—Å —Ç–æ–≤–∞—Ä–∞:</b> <code> {weight}</code>'
                                 ,
                               reply_markup=markup)

    await state.update_data(weight=weight)
    await states.ChangeItem.ConfirmChanges.set()


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ state
@dp.message_handler(user_id=ADMINS[0], state=states.ChangeItem.Description)
async def change_price_command(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item_name = data.get('item_name')
    item = await Item.query.where(Item.name == item_name).gino.first()
    photo = await Photo.query.where(Photo.product == item_name).gino.first()
    description = message.text


    markup = await confirm_description_changes()
    await message.answer_photo(photo=photo.file_id,
                               caption=f'<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞</b>: <code> {item.category_name}</code>\n'
                                       f'<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.subcategory_name}</code>\n'
                                       f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.name}</code>\n'
                                       f'<b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.price}</code>\n'
                                       f'<b>–í–µ—Å —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.weight}</code>\n'
                                       f'<b>–°–æ—Å—Ç–∞–≤:\n</b> <code> {description}</code>'
                               ,
                               reply_markup=markup)

    await state.update_data(description=description)
    await states.ChangeItem.ConfirmChanges.set()


# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ state
@dp.message_handler(user_id=ADMINS[0], state=states.ChangeItem.Photo,content_types=ContentTypes.PHOTO)
async def change_price_command(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item_name = data.get('item_name')
    item = await Item.query.where(Item.name == item_name).gino.first()
    photo = message.photo[-1].file_id

    markup = await confirm_photo_changes()
    await message.answer_photo(photo=photo,
                               caption=f'<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞</b>: <code> {item.category_name}</code>\n'
                                       f'<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.subcategory_name}</code>\n'
                                       f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.name}</code>\n'
                                       f'<b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.price}</code>\n'
                                       f'<b>–í–µ—Å —Ç–æ–≤–∞—Ä–∞:</b> <code> {item.weight}</code>'
                               ,
                               reply_markup=markup)

    await state.update_data(photo=photo)
    await states.ChangeItem.ConfirmChanges.set()

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(user_id=ADMINS[0],text_contains='ConfirmChangesPrice', state=states.ChangeItem.ConfirmChanges)
async def confirm_price_change(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_name = data.get('item_name')
    price = data.get('price')

    await state.reset_state()
    await call.message.answer('–¢–æ–≤–∞—Ä –∏–∑–º–µ–Ω–µ–Ω!')

    await Item.update.values(price=price).where(Item.name == item_name).gino.scalar()

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(user_id=ADMINS[0],text_contains='ConfirmWeightChanges', state=states.ChangeItem.ConfirmChanges)
async def confirm_weigh_change(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_name = data.get('item_name')
    weight = data.get('weight')

    await state.reset_state()
    await call.message.answer('–¢–æ–≤–∞—Ä –∏–∑–º–µ–Ω–µ–Ω!')

    await Item.update.values(weight=weight).where(Item.name == item_name).gino.scalar()

@dp.callback_query_handler(user_id=ADMINS[0],text_contains='ConfirmDescChanges', state=states.ChangeItem.ConfirmChanges)
async def confirm_desc_change(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_name = data.get('item_name')
    description = data.get('description')

    await state.reset_state()
    await call.message.answer('–¢–æ–≤–∞—Ä –∏–∑–º–µ–Ω–µ–Ω!')

    await Item.update.values(description=description).where(Item.name == item_name).gino.status()

@dp.callback_query_handler(user_id=ADMINS[0],text_contains='ConfirmPhotoChanges', state=states.ChangeItem.ConfirmChanges)
async def confirm_photo_change(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_name = data.get('item_name')
    photo = data.get('photo')

    await state.reset_state()
    await call.message.answer('–¢–æ–≤–∞—Ä –∏–∑–º–µ–Ω–µ–Ω!')

    await Photo.update.values(file_id=photo).where(Photo.product == item_name).gino.status()
