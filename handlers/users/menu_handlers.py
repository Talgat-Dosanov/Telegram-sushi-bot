import json
from typing import Union
import datetime
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery, Message, LabeledPrice, ContentTypes, InlineKeyboardMarkup, \
    InlineKeyboardButton, InputMediaPhoto, InputMedia, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from data.config import LP_TOKEN, ADMINS
from keyboards.inline.menu_keyboards import menu_cd, categories_keyboard, \
    items_keyboard, item_keyboard, buy_item, make_callback_data, menu_keyboards, input_keyboard, delivery_keyboard, \
    shipping_keyboard, subcategories_keyboard, phoneNumber_markup
from loader import dp, bot
from states import states
from utils.db_api.db_commands import get_item, get_categories, get_photo, get_items_from_shipping_cart, delete_cart, \
    get_order
from utils.db_api import models
from keyboards.inline.admin_keyboard import support_callback, order_for_admins, ready_keyboard, ready_button_callback


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /menu
from utils.db_api.models import PurchaseItem


@dp.message_handler(text_contains='üç¥ –ú–µ–Ω—é')
async def show_menu(message: types.Message):
    # –í—ã–ø–æ–ª–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await list_categories(message)

# –ö–æ—Ä–∑–∏–Ω–∞
@dp.message_handler(text_contains='üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def show_cart(message: types.Message, state: FSMContext):


    clean_cart = InlineKeyboardButton(
        text='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
        callback_data='clean'
    )
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [clean_cart]
        ]
    )

    user_id = int(message.from_user.id)
    cart = await get_items_from_shipping_cart(user_id)
    items_from_cart = []


    for item in cart:
        items_from_cart.append((str(item.item_name) + ' - ' + str(int(item.amount) / int(item.quantity)) + ' —Ä—É–±/—à—Ç ' + ' - ' + str(item.quantity) +'/—à—Ç'))
    items_from_cart = '\nüîπ '.join(items_from_cart)

    await message.answer(text='–í–∞—à –∑–∞–∫–∞–∑ üõé:\n'+'üîπ ' + items_from_cart, reply_markup=markup)

@dp.callback_query_handler(text_contains='clean')
async def clean_cart(call:CallbackQuery):
    user_id = call.from_user.id
    await delete_cart(user_id)
    await call.message.edit_text(text='–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!')



# –¢–∞ —Å–∞–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –û–Ω–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ CallbackQuery, —Ç–∞–∫ –∏ Message
# –ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, –º—ã –≤ –Ω–µ–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - category, subcategory, item_id,
# –ü–æ—ç—Ç–æ–º—É –ª–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ **kwargs
async def list_categories(message: Union[CallbackQuery, Message], **kwargs):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–≥–¥–µ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    markup = await categories_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞ —Ç–∏–ø –∞–ø–¥–µ–π—Ç–∞. –ï—Å–ª–∏ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(message, Message):
        await message.answer("–°–º–æ—Ç—Ä–∏, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å", reply_markup=markup)

    # –ï—Å–ª–∏ CallbackQuery - –∏–∑–º–µ–Ω—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif isinstance(message, CallbackQuery):
        call = message
        await call.message.edit_reply_markup(markup)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def list_subcategories(callback: CallbackQuery, category, **kwargs):
    markup = await subcategories_keyboard(category)

    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await callback.message.edit_reply_markup(markup)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –ù–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ü–µ–Ω–æ–π —Ç–æ–≤–∞—Ä–∞, –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def list_items(callback: CallbackQuery, category, subcategory, **kwargs):
    markup = await items_keyboard(category, subcategory)

    # –ò–∑–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await callback.message.edit_reply_markup(reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
async def show_item(callback: CallbackQuery, category, item_id, subcategory):
    markup = item_keyboard(category=category, subcategory=subcategory, item_id=item_id)

    item = await get_item(item_id)
    photo = await get_photo(item.name)

    # –ë–µ—Ä–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    text = "<b>{category_name}:</b> {item_name}\n" \
           "<b>–¶–µ–Ω–∞:</b> {price} <b>—Ä—É–±.</b>\n" \
           "<b>–í–µ—Å:</b> {weight} <b>–≥.</b>\n" \
           "<b>–°–æ—Å—Ç–∞–≤:</b>\n" \
           "<code>{description}</code>\n".format(category_name=item.category_name,
                                    item_name=item.name,
                                     price=item.price,
                                     weight=item.weight,
                                     description=item.description)
    await callback.message.answer_photo(photo=photo.file_id,
                                        caption=text,
                                        reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ–π –º–µ–Ω—é—à–∫–µ
@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: CallbackQuery, callback_data: dict):
    """
    :param call: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ CallbackQuery, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    :param callback_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_level = callback_data.get("level")

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
    category = callback_data.get("category")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ù–ï –í–°–ï–ì–î–ê - –º–æ–∂–µ—Ç –±—ã—Ç—å 0)
    subcategory = callback_data.get("subcategory")

    # –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ù–ï –í–°–ï–ì–î–ê - –º–æ–∂–µ—Ç –±—ã—Ç—å 0)
    item_id = int(callback_data.get("item_id"))

    # –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º "—É—Ä–æ–≤–Ω–∏" –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if category == 'Sushi':
        levels = {
            "0": list_categories,  # –û—Ç–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "1": list_subcategories, # –û—Ç–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "2": list_items,  # –û—Ç–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            "3": show_item  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä
        }
    else:
        levels = {
            "0": list_categories,  # –û—Ç–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            "1": list_items,  # –û—Ç–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            "2": show_item  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä
        }

    # –ó–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    current_level_function = levels[current_level]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    if category == 'Sushi':
        await current_level_function(
            call,
            category=category,
            subcategory=subcategory,
            item_id=item_id
        )
    else:
        await current_level_function(
            call,
            category=category,
            item_id=item_id,
            subcategory=subcategory
        )

# –í—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(buy_item.filter())
async def purchase_item(call: CallbackQuery, callback_data: dict, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞
    button1 = KeyboardButton('1')
    button2 = KeyboardButton('2')
    button3 = KeyboardButton('3')
    button4 = KeyboardButton('4')
    button5 = KeyboardButton('5')
    button6 = KeyboardButton('6')
    button7 = KeyboardButton('7')
    button8 = KeyboardButton('8')
    button9 = KeyboardButton('9')
    num_keyboard = ReplyKeyboardMarkup(row_width=3).add(
        button1,button2,button3,
        button4,button5,button6,
        button7,button8,button9
    )

    await call.message.edit_reply_markup()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:', reply_markup=num_keyboard)

    item_id = int(callback_data.get('item_id'))

    item = await get_item(int(item_id))


    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton(
            text='–û—Ç–º–µ–Ω–∞',
            callback_data='cancel'
        )
    )

    await states.NewItem.EnterQuality.set()
    await state.update_data(item=item,
                            purchase=models.PurchaseItem(
                            item_name=item.name,
                            buyer=call.from_user.id
                            ),
                            item_id=int(item_id),
                            item_price=item.price
                            )
    await states.NewItem.EnterQuality.set()

# –õ–æ–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(regexp=r'^(\d+)$', state=states.NewItem.EnterQuality)
async def enter_quality(message: types.Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ',reply_markup=ReplyKeyboardRemove())
    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    quantity = int(message.text)
    async with state.proxy() as data: # —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ FSM

        data['quantity'] = quantity
        item = data['item']
        amount = item.price * quantity
        data['amount'] = amount


    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    agree_button = InlineKeyboardButton(
        text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
        callback_data='order'
    )

    add_to_sc = InlineKeyboardButton(
        text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
        callback_data='add_to_order'
    )


    change_button = InlineKeyboardButton(
        text='–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ',
        callback_data='change_amount'
    )
    cancel_button = InlineKeyboardButton(
        text='–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É',
        callback_data='cancel'
    )


    #–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [agree_button], #–ü–µ—Ä–≤—ã–π —Ä—è–¥
            [add_to_sc], #–í—Ç–æ—Ä–æ–π —Ä—è–¥
            [change_button],  # –¢—Ä–µ—Ç–∏–π —Ä—è–¥
            [cancel_button]  #–¢—Ä–µ—Ç–∏–π —Ä—è–¥
        ]
    )
    await message.answer(text=
        f'–í–∞—à –∑–∞–∫–∞–∑ {item.name} {quantity} —à—Ç.\n'
        f'–ù–∞ —Å—É–º–º—É: {amount} —Ä—É–±.',
        reply_markup=markup
    )

    await states.NewItem.Order.set()

# –¢–æ —á—Ç–æ, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä
@dp.message_handler(state=states.NewItem.EnterQuality)
async def not_quantity(message: types.Message):
    await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')

# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞ –ø–æ–ø–∞–¥–∞–µ–º –≤ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä
@dp.callback_query_handler(text_contains='cancel', state=states.NewItem)
async def process_cancel(call: CallbackQuery, state: FSMContext):
    markup = await menu_keyboards()
    await call.message.edit_text('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É')
    await call.message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ', reply_markup=markup)
    await state.reset_state()

# –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ø–∞–¥–∞–µ–º —Å—é–¥–∞
@dp.callback_query_handler(text_contains='change_amount', state=states.NewItem.Order)
async def change(call: CallbackQuery):
    num_keyboard = await input_keyboard()
    await call.message.answer('‚¨á', reply_markup=num_keyboard)
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ: ')

    await states.NewItem.EnterQuality.set()

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query_handler(text_contains='add_to_order', state=states.NewItem.Order)
async def add_to_order(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    shopping_cart = models.ShoppingCart
    item: models.Item = data.get('item')
    purchase: models.PurchaseItem = data.get('purchase')
    item_id = item.price
    item_name = purchase.item_name
    user_id = call.from_user.id
    amount = data.get('amount')
    quantity = int(amount) / int(item.price)

    await shopping_cart.create(
        item_id=item_id,
        item_name=item_name,
        user_id=user_id,
        quantity=quantity,
        amount=amount
    )


    await state.reset_state()

    keyboard = await menu_keyboards()

    await call.message.edit_text(text=f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∫ –∑–∞–∫–∞–∑—É {item_name}')
    await call.message.answer('–ù–∞–∂–º–∏—Ç–µ <code>üç¥ –ú–µ–Ω—é</code>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=keyboard)

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É
@dp.callback_query_handler(text_contains='order', state=states.NewItem.Order)
async def order_info_command(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    purchase: models.PurchaseItem = data.get('purchase')


    await models.ShoppingCart.create(
        user_id=call.from_user.id,
        item_id=data.get('item_id'),
        item_name=purchase.item_name,
        quantity=data.get('amount') / data.get('item_price'),
        amount=data.get('amount')
    )
    user_id = purchase.buyer
    shopping_cart = await get_items_from_shipping_cart(user_id)
    item_name = []
    total_amount = 0
    for item in shopping_cart:
        item_name.append((str(item.item_name) + ' - ' + str(item.quantity) + '/—à—Ç'))
        total_amount += item.amount

    item_name = '\n'.join(item_name)
    keyboard = await delivery_keyboard()
    await call.message.edit_text(
        text=f'–í–∞—à –∑–∞–∫–∞–∑:\n'
             f'{item_name}\n'
             f'–ù–∞ —Å—É–º–º—É: {total_amount} —Ä—É–±.',
        reply_markup=keyboard
    )
    await states.NewItem.Approval.set()

# –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(text_contains='delivery', state=states.NewItem.Approval)
async def delivery_command(call: CallbackQuery):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n'
                                 '"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, –¥.6, –∫–≤. 3"</i>')

    await states.NewItem.Delivery.set()

# –õ–æ–≤–∏–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é —Ö–µ–Ω–¥–ª–µ—Ä–∞
@dp.message_handler(regexp=r'(. \d+)|[/]', state=states.NewItem.Delivery)
async def get_shipping_address(message: types.Message,state: FSMContext):
    shipping_address = message.text

    markup = await shipping_keyboard()
    await message.answer(text='–í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n'
                                 f'{shipping_address}',
                            reply_markup=markup)
    await state.update_data(
        shipping_address=shipping_address,
        delivery_method='–î–æ—Å—Ç–∞–≤–∫–∞'
    )
    await states.NewItem.Approval.set()

@dp.message_handler(state=states.NewItem.Delivery)
async def wrong_shipping_address(message: types.Message):
    await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

# –•–µ–¥–ª–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(text_contains='change_shipping_address', state=states.NewItem.Approval)
async def change_shipping_address(call: CallbackQuery):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–Ω–æ–≤–æ!')

    await states.NewItem.Delivery.set()



# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ c –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.callback_query_handler(text_contains='phone_number_pickup',state=states.NewItem.Approval)
async def ask_phone_number_pickup(call: CallbackQuery, state: FSMContext):

    user_id = call.from_user.id
    await state.update_data(delivery_method='–°–∞–º–æ–≤—ã–≤–æ–∑',
                            user_id=user_id)
    markup = await phoneNumber_markup()
    try:
        user = await PurchaseItem.select('phone_number').where(PurchaseItem.buyer == user_id).gino.scalar()
        if user == None:
            raise AttributeError
        await call.message.edit_text(f'‚òé –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user}', reply_markup=markup)
        await states.NewItem.Approval.set()
    except AttributeError:
        await call.message.edit_text(f'‚òé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏')
        await states.NewItem.PhoneNumber.set()



# –§—É–Ω–∫—Ü–∏—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
@dp.callback_query_handler(text_contains='pickup', state=states.NewItem.Approval)
async def process_pickup_command(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    print(user_id)

    phone_number = await PurchaseItem.select('phone_number').where(PurchaseItem.buyer == user_id).gino.scalar()
    if phone_number == None:
        phone_number = data.get('phone_number')
    await state.update_data(
        phone_number=phone_number
    )



    data = await state.get_data()
    purchase: models.PurchaseItem = data.get('purchase')

    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(
        text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
        callback_data='accept'
        )
    )
    keyboard.row(
        InlineKeyboardButton(
            text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
            callback_data='cancel'
        )
    )
    user_id = purchase.buyer
    shopping_cart = await get_items_from_shipping_cart(user_id)
    item_name = []
    total_amount = 0
    delivery_method = data.get('delivery_method')
    for item in shopping_cart:
        item_name.append((str(item.item_name) + ' - ' + str(item.quantity) + '/—à—Ç'))
        total_amount += item.amount

    item_name = '\n'.join(item_name)
    await call.message.edit_text(text=f'–í–∞—à –∑–∞–∫–∞–∑:\n'
             f'{item_name}\n'
             f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n'
             f'–ù–∞ —Å—É–º–º—É: {total_amount} —Ä—É–±\n.'
             f'–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}',
        reply_markup=keyboard)


    await states.NewItem.Approval.set()

# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ c –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.callback_query_handler(text_contains='phone',state=states.NewItem.Approval)
async def ask_phone_number(call: CallbackQuery):
    await call.message.edit_text('‚òé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏')


    await states.NewItem.PhoneNumber.set()

# –ó–∞–Ω–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ state
@dp.message_handler(regexp=r'\b\d{11}\b', state=states.NewItem.PhoneNumber)
async def get_phone_number(message: types.Message, state: FSMContext):
    phone_number = int(message.text)
    markup =InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton(
            text='–ü—Ä–∏–Ω—è—Ç—å',
            callback_data='description'
        )
    )
    markup.row(
        InlineKeyboardButton(
            text='–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ',
            callback_data='change_phone_number'
        )
    )
    await message.answer('–í–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:\n'
                            f'{phone_number}',
                            reply_markup=markup
                            )
    await state.update_data(
        phone_number=phone_number
    )
    await states.NewItem.Approval.set()

@dp.message_handler(state=states.NewItem.PhoneNumber)
async def wrong_phone_number(message: types.Message):
    await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

@dp.callback_query_handler(text_contains='change_phone_number', state=states.NewItem.Approval)
async def change(call: CallbackQuery):

    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ: ')
    await states.NewItem.PhoneNumber.set()


@dp.callback_query_handler(text_contains='description', state=states.NewItem.Approval)
async def description_order(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    delivery_method = data.get('delivery_method')
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton(
        text='–î–∞',
        callback_data='note'
    )
    )
    if delivery_method == '–°–∞–º–æ–≤—ã–≤–æ–∑':
        markup.row(InlineKeyboardButton(
            text='–ù–µ—Ç',
            callback_data='pickup'
        )
        )
    else:
        markup.row(InlineKeyboardButton(
            text='–ù–µ—Ç',
            callback_data='accept'
        )
        )
    await call.message.answer('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É?', reply_markup=markup)
    await states.NewItem.Approval.set()

@dp.callback_query_handler(text_contains='note', state=states.NewItem.Approval)
async def enter_description(call: CallbackQuery):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏—è')

    await states.NewItem.Note.set()

@dp.message_handler(state=states.NewItem.Note)
async def save_note(message: types.Message, state: FSMContext):
    text = message.text
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton(
            text='–û–ö',
            callback_data='accept'
        )
    )
    markup.row(
        InlineKeyboardButton(
            text='–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ',
            callback_data='enter_again'
        )
    )
    await message.answer(text=text, reply_markup=markup)
    await state.update_data(note=text)
    await states.NewItem.Approval.set()

@dp.callback_query_handler(text_contains='enter_again', state=states.NewItem.Approval)
async def enter_description(call: CallbackQuery):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
    await states.NewItem.Note.set()

@dp.callback_query_handler(text_contains='accept', state=states.NewItem.Approval)
async def send_admins(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    purchase: models.PurchaseItem = data.get('purchase')
    user_id = purchase.buyer
    shopping_cart = await get_items_from_shipping_cart(user_id)
    item_name = []
    if data.get('delivery_method') == '–î–æ—Å—Ç–∞–≤–∫–∞':
        total_amount = 100
    else:
        total_amount = 0
    for item in shopping_cart:
        item_name.append((str(item.item_name) + ' - ' + str(item.quantity) + '/—à—Ç'))
        total_amount += item.amount
    item_name = '\n'.join(item_name)
    await purchase.create()
    await purchase.update(
        item_name=item_name,
        receiver=call.from_user.full_name,
        purchase_time=datetime.datetime.now(),
        amount=total_amount,
        shipping_address=data.get('shipping_address'),
        phone_number=str(data.get('phone_number')),
        delivery_method=data.get('delivery_method'),
        note=data.get('note')

    ).apply()
    if purchase.delivery_method == '–î–æ—Å—Ç–∞–≤–∫–∞':
        order_info = '–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑!\n' \
                     f'üë§ –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {purchase.receiver}\n' \
                     f'üîë ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {purchase.buyer}\n' \
                     f'‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {purchase.phone_number}\n' \
                     f'üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {purchase.shipping_address}\n' \
                     f'üõé –ó–∞–∫–∞–∑:\n' \
                     f'{item_name}\n' \
                     f'üíµ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {purchase.amount} —Ä—É–±\n' \
                     f'üíµ –°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: 100 —Ä—É–±\n' \
                     f'üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {purchase.amount + 100} —Ä—É–±\n' \
                     f'üìú –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É:\n ' \
                     f'{purchase.note}'

    else:
        order_info = f'–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ ‚Ññ{purchase.id}!\n' \
                     f'üë§ –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {purchase.receiver}\n' \
                     f'üîë ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {purchase.buyer}\n' \
                     f'‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {purchase.phone_number}\n' \
                     f'üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {purchase.delivery_method}\n' \
                     f'üõé –ó–∞–∫–∞–∑:\n' \
                     f'{purchase.item_name}\n' \
                     f'üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {purchase.amount} —Ä—É–±\n' \
                     f'üìú –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É:\n ' \
                     f'{purchase.note}'



    keyboard_for_admins = order_for_admins(int(purchase.buyer), order_id=purchase.id)
    await bot.send_message(chat_id=ADMINS[0], text=order_info, reply_markup=keyboard_for_admins)
    await state.reset_state()
    await delete_cart(purchase.buyer)

    menu_keyboard = await menu_keyboards()
    await call.message.edit_text(text= f'–í–∞—à –∑–∞–∫–∞–∑:\n'
                                       f'{item_name}\n'
                                       f'–ö –æ–ø–ª–∞—Ç–µ: {total_amount} —Ä—É–±.',

                                 )

    await call.message.answer(text=f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{purchase.id} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!',
                              reply_markup=menu_keyboard)

# –õ–æ–≤–∏–º callback –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(support_callback.filter())
async def accept_order(call: CallbackQuery, callback_data: dict):
    order_id = callback_data.get('order_id')
    order = await get_order(int(order_id))
    user_id = callback_data.get('user_id')

    if order.delivery_method == '–î–æ—Å—Ç–∞–≤–∫–∞':
        order_info = '–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑!\n' \
                     f'üë§ –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {order.receiver}\n' \
                     f'üîë ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {order.buyer}\n' \
                     f'‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order.phone_number}\n' \
                     f'üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.shipping_address}\n' \
                     f'üõé –ó–∞–∫–∞–∑:\n' \
                     f'{order.item_name}\n' \
                     f'üíµ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.amount} —Ä—É–±\n' \
                     f'üíµ –°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: 100 —Ä—É–±\n' \
                     f'üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {order.amount + 100} —Ä—É–±\n'\
                     f'üìú –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É:\n ' \
                     f'{order.note}'

    else:
        order_info = f'–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ ‚Ññ{order.id}!\n' \
                     f'üë§ –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {order.receiver}\n' \
                     f'üîë ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {order.buyer}\n' \
                     f'‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order.phone_number}\n' \
                     f'üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_method}\n' \
                     f'üõé –ó–∞–∫–∞–∑:\n' \
                     f'{order.item_name}\n' \
                     f'üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.amount} —Ä—É–±\n' \
                     f'üìú –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É:\n ' \
                     f'{order.note}'

    keyboard_ready = ready_keyboard(user_id, int(order_id))
    await call.message.edit_text(text=order_info, reply_markup=keyboard_ready)
    await call.bot.send_message(chat_id=user_id, text='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –ì–æ—Ç–æ–≤–∏—Ç—Å—è!')


@dp.callback_query_handler(ready_button_callback.filter())
async def send_ready_command(call: CallbackQuery, callback_data: dict):
    order_id = callback_data.get('order_id')
    order = await get_order(int(order_id))
    user_id = callback_data.get('user_id')

    if order.delivery_method == '–î–æ—Å—Ç–∞–≤–∫–∞':
        order_info = f'üõé –ó–∞–∫–∞–∑ ‚Ññ {order_id} –ì–æ—Ç–æ–≤\n' \
                     f'üë§ –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {order.receiver}\n' \
                     f'üîë ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {order.buyer}\n' \
                     f'‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order.phone_number}\n' \
                     f'üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.shipping_address}\n' \
                     f'üõé –ó–∞–∫–∞–∑:\n' \
                     f'{order.item_name}\n' \
                     f'üíµ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.amount} —Ä—É–±\n' \
                     f'üíµ –°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: 100 —Ä—É–±\n' \
                     f'üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {order.amount + 100} —Ä—É–±\n' \
                     f'üìú –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É:\n ' \
                     f'{order.note}'
    else:
        order_info = f'–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ì–æ—Ç–æ–≤!\n' \
                     f'üë§ –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {order.receiver}\n' \
                     f'üîë ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {order.buyer}\n' \
                     f'‚òé –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order.phone_number}\n' \
                     f'üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_method}\n' \
                     f'üõé –ó–∞–∫–∞–∑:\n' \
                     f'{order.item_name}\n' \
                     f'üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.amount} —Ä—É–±\n' \
                     f'üìú –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É:\n ' \
                     f'{order.note}'

    await call.message.edit_text(text=order_info)
    if order.delivery_method == '–î–æ—Å—Ç–∞–≤–∫–∞':
        await call.bot.send_message(chat_id=user_id, text=f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id}: –ì–æ—Ç–æ–≤! –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É!')
    else:
        await call.bot.send_message(chat_id=user_id, text=f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id}: –ì–æ—Ç–æ–≤!')
    await call.bot.send_sticker(chat_id=user_id, sticker='CAACAgIAAxkBAAELJU5hCkFXMFQ4GokhJZrMBiZePzw4hwACHQADFkJrCoaz3LxWR4WIIAQ')
# –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É Telegram
'''
@dp.callback_query_handler(text_contains='payment', state=states.NewItem.Approval)
async def approval(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø–ª–∞—Ç–∏—Ç—å" ')


    data = await state.get_data()

    purchase: models.PurchaseItem = data.get('purchase')
    items: models.Item = data.get('item')
    photo = await get_photo(items.name)


    await models.ShoppingCart.create(
        user_id=call.from_user.id,
        item_id=data.get('item_id'),
        item_name=purchase.item_name,
        quantity=data.get('amount') / data.get('item_price'),
        amount=data.get('amount')
    )
    user_id = purchase.buyer
    shopping_cart = await get_items_from_shipping_cart(user_id)
    item_name = []
    total_amount = 0
    for item in shopping_cart:
        item_name.append((str(item.item_name) + ' - ' + str(item.quantity) +'/—à—Ç'))
        total_amount+=item.amount

    item_name = ', '.join(item_name)

    currency = 'RUB'
    need_name = True
    need_phone_number = True
    need_email = False
    need_shipping_address = True

    await bot.send_invoice(
        call.message.chat.id,
        title='–í–∞—à –∑–∞–∫–∞–∑:',
        description=item_name,
        payload='some-invoice-payload-for-our-internal-use',
        start_parameter='example',
        currency=currency,
        photo_url='https://imgv3.fotor.com/images/homepage-feature-card/Fotor-AI-photo-enhancement-tool-ru.jpg',
        photo_height=512,
        photo_width=512,
        photo_size=512,
        prices=PRICES,
        provider_token=LP_TOKEN,
        need_name=need_name,
        need_phone_number=need_phone_number,
        need_email=need_email,
        is_flexible=True,
        #need_shipping_address=need_shipping_address

    )
    cancel_button = InlineKeyboardButton(
        text='–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É',
        callback_data='cancel'
    )
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [cancel_button]
        ]
    )
    await call.message.answer(text='–û—Ç–º–µ–Ω–∏—Ç—å:',reply_markup=markup)
    await state.update_data(purchase=models.PurchaseItem(
        buyer = call.from_user.id,
        item_name=item_name,
        amount=total_amount,
        purchase_time=datetime.datetime.now(),
    ))
    await states.NewItem.Purchase.set()



@dp.pre_checkout_query_handler(state=states.NewItem.Purchase)
async def checkout(pre_checkout_query: types.PreCheckoutQuery, state: FSMContext):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, True)
    data = await state.get_data()
    purchase: models.PurchaseItem = data.get('purchase')
    success = await check_payment(purchase)
    if success:
        await purchase.create()
        await purchase.update(
            successful=True,
            shipping_address=pre_checkout_query.order_info.shipping_address.to_python()
            if pre_checkout_query.order_info.shipping_address
            else None,
            phone_number = pre_checkout_query.order_info.phone_number,
            receiver = pre_checkout_query.order_info.name,
        ).apply()

        await state.reset_state()
        await delete_cart(purchase.buyer)
        await bot.send_message(pre_checkout_query.from_user.id,
                               '–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} RUB —Å–æ–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!!!'.format(
                                   amount=purchase.amount))

    else:
        await bot.send_message(pre_checkout_query.from_user.id,
                               '–ü–æ–∫—É–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ....')
'''
@dp.message_handler()
async def other_echo(message: types.Message):
    await message.answer(message.text)


#async def check_payment(purchase: models.PurchaseItem):
 #   return True